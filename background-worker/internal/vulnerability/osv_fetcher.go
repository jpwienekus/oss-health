package vulnerability

import (
	"context"
	"fmt"
	"sync"

	"github.com/oss-health/background-worker/internal/utils"
)

func EnrichDependenciesConcurrently(ctx context.Context, deps []Query, limiter *utils.DefaultRateLimiter, workerCount int) ([][]Vulnerability, error) {
	var (
		wg      sync.WaitGroup
		mu      sync.Mutex
		results = make([][]Vulnerability, len(deps))
		errs    = make([]error, len(deps))
	)

	sem := make(chan struct{}, workerCount)

	for i, dep := range deps {
		i, dep := i, dep
		sem <- struct{}{}
		wg.Add(1)

		go func() {
			defer wg.Done()
			defer func() { <-sem }()

			if err := limiter.WaitUntilAllowed(ctx, dep.Package.Ecosystem); err != nil {
				errs[i] = err
				return
			}

			res, err := QueryBatch(ctx, []Query{dep})
			if err != nil {
				errs[i] = err
				return
			}

			mu.Lock()
			results[i] = res[0]
			mu.Unlock()
		}()
	}

	wg.Wait()

	for _, err := range errs {
		if err != nil {
			return nil, fmt.Errorf("some queries failed: %v", err)
		}
	}
	return results, nil
}
