



# async def update_dependency_vulnerabilities(
#     db_session: AsyncSession,
#     dependency_id: int,
#     dependency_version: str,
#     new_vulnerabilities: List[VulnerabilityDBModel],
# ):
#     version = await get_dependency_version(db_session, dependency_id, dependency_version)
#
#     if not version:
#         raise ValueError(f"Version {version} not found.")
#
#     version.vulnerabilities.clear()
#     await db_session.flush()
#
#     attached_vulnerabilities = []
#
#     for vulnerability in new_vulnerabilities:
#         vuln_result = await db_session.execute(
#             select(VulnerabilityDBModel).where(
#                 VulnerabilityDBModel.osv_id == vulnerability.osv_id
#             )
#         )
#         existing_vulnerability = vuln_result.scalar_one_or_none()
#
#         if existing_vulnerability:
#             attached_vulnerabilities.append(existing_vulnerability)
#         else:
#             db_session.add(vulnerability)
#             await db_session.flush()
#             attached_vulnerabilities.append(vulnerability)
#
#     version.vulnerabilities.extend(attached_vulnerabilities)
#     await db_session.commit()
