from typing import List

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.crud.dependency import get_dependency_with_vulnerabilities_loaded
from app.models import Vulnerability as VulnerabilityDBModel


async def update_dependency_vulnerabilities(
    db_session: AsyncSession,
    dependency_id: int,
    new_vulnerabilities: List[VulnerabilityDBModel],
):
    dependency = await get_dependency_with_vulnerabilities_loaded(
        db_session, dependency_id
    )

    if not dependency:
        raise ValueError(f"Dependency with id {dependency_id} not found.")

    dependency.vulnerabilities.clear()
    await db_session.flush()

    attached_vulnerabilities = []

    for vulnerability in new_vulnerabilities:
        vuln_result = await db_session.execute(
            select(VulnerabilityDBModel).where(
                VulnerabilityDBModel.osv_id == vulnerability.osv_id
            )
        )
        existing_vulnerability = vuln_result.scalar_one_or_none()

        if existing_vulnerability:
            attached_vulnerabilities.append(existing_vulnerability)
        else:
            db_session.add(vulnerability)
            await db_session.flush()
            attached_vulnerabilities.append(vulnerability)

    dependency.vulnerabilities.extend(attached_vulnerabilities)
    await db_session.commit()
