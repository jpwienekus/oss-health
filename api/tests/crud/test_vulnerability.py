import pytest
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.crud.vulnerability import replace_version_vulnerabilities
from app.models.relationships import VersionVulnerability as VersionVulnerabilityDBModel
from app.models.version import Version as VersionDBModel
from app.models.vulnerability import Vulnerability as VulnerabilityDBModel


@pytest.mark.asyncio
async def test_replace_version_vulnerabilities_inserts_new_vulnerabilitys_and_links(
    db_session: AsyncSession, test_version: VersionDBModel
):
    osv_ids = ["OSV-001", "OSV-002"]

    await replace_version_vulnerabilities(
        db_session, version_vulnerabilities=[(test_version.id, osv_ids)]
    )

    # Check if new vulnerabilities were inserted
    result = await db_session.execute(
        select(VulnerabilityDBModel).where(VulnerabilityDBModel.osv_id.in_(osv_ids))
    )
    inserted_vulnerabilities = result.scalars().all()
    assert len(inserted_vulnerabilities) == 2
    assert {v.osv_id for v in inserted_vulnerabilities} == set(osv_ids)

    # Check if VersionVulnerability links were created
    result = await db_session.execute(
        select(VersionVulnerabilityDBModel).where(
            VersionVulnerabilityDBModel.version_id == test_version.id
        )
    )
    links = result.scalars().all()
    assert len(links) == 2
    linked_ids = [link.vulnerability_id for link in links]
    assert set(linked_ids) == {v.id for v in inserted_vulnerabilities}
    assert {link.vulnerability_id for link in links} == {
        v.id for v in inserted_vulnerabilities
    }


@pytest.mark.asyncio
async def test_replace_version_vulnerabilities_skips_existing_vulns(
    db_session: AsyncSession, test_version: VersionDBModel
):
    # Insert vulnerability manually
    pre_existing = VulnerabilityDBModel(osv_id="OSV-EXIST")
    db_session.add(pre_existing)
    await db_session.commit()

    await replace_version_vulnerabilities(
        db_session, version_vulnerabilities=[(test_version.id, ["OSV-EXIST"])]
    )

    # No duplicate vulnerabilities
    result = await db_session.execute(
        select(VulnerabilityDBModel).where(VulnerabilityDBModel.osv_id == "OSV-EXIST")
    )
    vulnerabilities = result.scalars().all()
    assert len(vulnerabilities) == 1

    # One link should be created
    result = await db_session.execute(
        select(VersionVulnerabilityDBModel).where(
            VersionVulnerabilityDBModel.version_id == test_version.id
        )
    )
    links = result.scalars().all()
    assert len(links) == 1
    assert links[0].vulnerability_id == pre_existing.id


@pytest.mark.asyncio
async def test_replace_version_vulnerabilities_deletes_old_links(
    db_session: AsyncSession, test_version: VersionDBModel
):
    # Insert initial vulnerability and link
    old_vulnerability = VulnerabilityDBModel(osv_id="OSV-OLD")
    db_session.add(old_vulnerability)
    await db_session.flush()

    old_link = VersionVulnerabilityDBModel(
        version_id=test_version.id, vulnerability_id=old_vulnerability.id
    )
    db_session.add(old_link)
    await db_session.commit()

    # Replace with a new vuln
    await replace_version_vulnerabilities(
        db_session, version_vulnerabilities=[(test_version.id, ["OSV-NEW"])]
    )

    # Old link should be gone
    result = await db_session.execute(
        select(VersionVulnerabilityDBModel).where(
            VersionVulnerabilityDBModel.version_id == test_version.id
        )
    )
    links = result.scalars().all()
    assert len(links) == 1

    new_vulnerability = (
        (
            await db_session.execute(
                select(VulnerabilityDBModel).where(
                    VulnerabilityDBModel.osv_id == "OSV-NEW"
                )
            )
        )
        .scalars()
        .first()
    )

    assert new_vulnerability
    assert links[0].vulnerability_id == new_vulnerability.id


@pytest.mark.asyncio
async def test_replace_version_vulnerabilities_handles_empty_input(
    db_session: AsyncSession,
):
    # Should not raise
    await replace_version_vulnerabilities(db_session, version_vulnerabilities=[])

    # Nothing should be inserted
    result = await db_session.execute(select(VulnerabilityDBModel))
    vulnerabilities = result.scalars().all()
    assert vulnerabilities == []

    result = await db_session.execute(select(VersionVulnerabilityDBModel))
    links = result.scalars().all()
    assert links == []
