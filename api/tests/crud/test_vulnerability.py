
import pytest
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.models.dependency import Dependency as DependencyDBModel
from app.models.version import Version as VersionDBModel
from app.models.vulnerability import Vulnerability as VulnerabilityDBModel
from app.models.relationships import VersionVulnerability as VersionVulnerabilityDBModel
from app.crud.vulnerability import replace_version_vulnerabilities

async def insert_test_version(db_session: AsyncSession, version_str: str = "1.0.0") -> VersionDBModel:
    dependency = DependencyDBModel(name="example-package", ecosystem="pypi")
    db_session.add(dependency)
    await db_session.flush()

    version = VersionDBModel(version=version_str, dependency_id=dependency.id)
    db_session.add(version)
    await db_session.flush()

    return version

@pytest.mark.asyncio
async def test_replace_version_vulnerabilities_inserts_new_vulns_and_links(db_session: AsyncSession):
    version = await insert_test_version(db_session)
    osv_ids = ["OSV-001", "OSV-002"]

    await replace_version_vulnerabilities(
        db_session,
        version_vulns=[(version.id, osv_ids)]
    )

    # Check if new vulnerabilities were inserted
    result = await db_session.execute(select(VulnerabilityDBModel).where(VulnerabilityDBModel.osv_id.in_(osv_ids)))
    inserted_vulns = result.scalars().all()
    assert len(inserted_vulns) == 2
    assert {v.osv_id for v in inserted_vulns} == set(osv_ids)

    # Check if VersionVulnerability links were created
    result = await db_session.execute(select(VersionVulnerabilityDBModel).where(VersionVulnerabilityDBModel.version_id == version.id))
    links = result.scalars().all()
    assert len(links) == 2
    linked_ids = [link.vulnerability_id for link in links]
    assert set(linked_ids) == {v.id for v in inserted_vulns}
    assert {link.vulnerability_id for link in links} == {v.id for v in inserted_vulns}


@pytest.mark.asyncio
async def test_replace_version_vulnerabilities_skips_existing_vulns(db_session: AsyncSession):
    version = await insert_test_version(db_session)
    
    # Insert vulnerability manually
    pre_existing = VulnerabilityDBModel(osv_id="OSV-EXIST")
    db_session.add(pre_existing)
    await db_session.commit()

    await replace_version_vulnerabilities(
        db_session,
        version_vulns=[(version.id, ["OSV-EXIST"])]
    )

    # No duplicate vulnerabilities
    result = await db_session.execute(
        select(VulnerabilityDBModel).where(VulnerabilityDBModel.osv_id == "OSV-EXIST")
    )
    vulns = result.scalars().all()
    assert len(vulns) == 1

    # One link should be created
    result = await db_session.execute(
        select(VersionVulnerabilityDBModel).where(
            VersionVulnerabilityDBModel.version_id == version.id
        )
    )
    links = result.scalars().all()
    assert len(links) == 1
    assert links[0].vulnerability_id == pre_existing.id


@pytest.mark.asyncio
async def test_replace_version_vulnerabilities_deletes_old_links(db_session: AsyncSession):
    version = await insert_test_version(db_session)

    # Insert initial vulnerability and link
    vuln_old = VulnerabilityDBModel(osv_id="OSV-OLD")
    db_session.add(vuln_old)
    await db_session.flush()

    old_link = VersionVulnerabilityDBModel(
        version_id=version.id, vulnerability_id=vuln_old.id
    )
    db_session.add(old_link)
    await db_session.commit()

    # Replace with a new vuln
    await replace_version_vulnerabilities(
        db_session,
        version_vulns=[(version.id, ["OSV-NEW"])]
    )

    # Old link should be gone
    result = await db_session.execute(
        select(VersionVulnerabilityDBModel).where(
            VersionVulnerabilityDBModel.version_id == version.id
        )
    )
    links = result.scalars().all()
    assert len(links) == 1

    new_vuln = (
            await db_session.execute(
        select(VulnerabilityDBModel).where(VulnerabilityDBModel.osv_id == "OSV-NEW")
        )
    ).scalars().first()
    
    assert new_vuln
    assert links[0].vulnerability_id == new_vuln.id


@pytest.mark.asyncio
async def test_replace_version_vulnerabilities_handles_empty_input(db_session: AsyncSession):
    # Should not raise
    await replace_version_vulnerabilities(db_session, version_vulns=[])

    # Nothing should be inserted
    result = await db_session.execute(select(VulnerabilityDBModel))
    vulns = result.scalars().all()
    assert vulns == []

    result = await db_session.execute(select(VersionVulnerabilityDBModel))
    links = result.scalars().all()
    assert links == []
